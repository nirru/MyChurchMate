package com.mcm.menuandnotification;

import java.io.File;
import java.io.FileInputStream;
import java.text.DateFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

import android.app.Activity;
import android.app.AlarmManager;
import android.app.AlertDialog;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.provider.CalendarContract;
import android.support.v4.app.Fragment;
import android.util.Log;
//import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import com.mcm.NotificationReceiver;
import com.mcm.R;
import com.mcm.ReminderService;
import com.mcm.SplashActivity;

public class NotificationDetails extends Fragment implements AlertInterface {
	TextView tv_eventName, tv_eventDateTime, tv_eventlongDesc,
			location_not_provided_tv;;
	ListView listView;
	ArrayList<ArrayList<String>> eventsList;
	Context context;
	int clientID;
	String eventName;
	String eventDateTime;
	String eventlongDesc;
	String dateToPass;
	String datOfWeek;
	String month;
	String year;
	String folderName;
	int hour, min, endhour, endmin;
	UiTimePicker uiTimePicker;
	TextView evetnDeatilHeader;
	int monthIndex = 0, endmonthIndex = 0;
	int dateIndex;
	String amPm, endamPm;

	Uri eventsUri, remainderUri;

	Cursor cursor;

	int[] calendarId;
	String[] calendarNames;
	String location;
	long startCalTime;
	long endCalTime;
	Date eventDate = null, endEventDate = null;
	String calId = null;
	int customCalenderHour, endcustomCalenderHour;
	Date eventTime, eventStartTime;
	ImageView imageReminder, ev_detail_fg_bg_imageView;

	String enddateToPass, enddatOfWeek, endmonth, endday, endyear;
	NotificationManager nm;

	public NotificationDetails(Context context, String eventName,
			String eventDateTime, String eventlongDesc, String dateToPass,
			String datOfWeek, String month, String year, int hour, int min,
			String amPm, String enddateToPass, String enddatOfWeek,
			String endmonth, String endyear, int endhour, int endmin,
			String endamPm, String folderName, Date eventTime,
			Date eventStartTime, String location) {

		this.eventName = eventName;
		this.eventDateTime = eventDateTime;
		this.eventlongDesc = eventlongDesc;
		this.dateToPass = dateToPass;
		this.datOfWeek = datOfWeek;
		this.month = month;
		this.year = year;
		this.hour = hour;
		this.min = min;
		this.amPm = amPm;

		this.enddateToPass = enddateToPass;
		this.enddatOfWeek = enddatOfWeek;
		this.endmonth = endmonth;
		this.endyear = endyear;
		this.endhour = endhour;
		this.endmin = endmin;
		this.endamPm = endamPm;

		this.folderName = folderName;
		this.context = context;
		this.eventTime = eventTime;
		this.eventStartTime = eventStartTime;
		this.location = location;

		uiTimePicker = new UiTimePicker(context, false);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View rootView = inflater.inflate(R.layout.fragement_detail_event,
				container, false);
		init(rootView);
		setBackground("EventsBG.png", folderName, ev_detail_fg_bg_imageView);
		setTextOnTextView();
		return rootView;
	}

	private void init(View rootView) {
		// Log.e("EVENTS LIST", "" + eventsList);
		imageReminder = (ImageView) rootView.findViewById(R.id.imageView1);
		ev_detail_fg_bg_imageView = (ImageView) rootView
				.findViewById(R.id.fg_detail_imageview);
		evetnDeatilHeader = (TextView) rootView
				.findViewById(R.id.event_detail_header);
		evetnDeatilHeader.setText("Notification Details");
		tv_eventName = (TextView) rootView.findViewById(R.id.textView2);
		tv_eventDateTime = (TextView) rootView.findViewById(R.id.textView4);
		location_not_provided_tv = (TextView) rootView
				.findViewById(R.id.textView5);
		tv_eventlongDesc = (TextView) rootView.findViewById(R.id.textView7);

		// location_not_provided_tv.setTypeface(SplashActivity.mpBold);
		// evetnDeatilHeader.setTypeface(SplashActivity.mpBold);
		// tv_eventName.setTypeface(SplashActivity.mpBold);
		// tv_eventDateTime.setTypeface(SplashActivity.mpBold);
		// tv_eventlongDesc.setTypeface(SplashActivity.mpBold);

		nm = (NotificationManager) context
				.getSystemService(Context.NOTIFICATION_SERVICE);
		imageReminder.setOnClickListener(l);
	}

	private void setTextOnTextView() {

		String longDesc = "0:0 am to 0:0 am  on  every " + datOfWeek
				+ ". Please come and enjoy";
		tv_eventName.setText(eventName);
		tv_eventDateTime.setText(dateToPass);
		tv_eventlongDesc.setText(eventlongDesc);

	}

	private int getMonth() {
		try {
			Calendar cal = Calendar.getInstance();
			cal.setTime(new SimpleDateFormat("MMM").parse(month));
			monthIndex = cal.get(Calendar.MONTH);
			String monthString = new DateFormatSymbols().getMonths()[monthIndex];
			Log.e("MONTH NAME AFTER CONVERING", "" + monthString);
		} catch (java.text.ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Log.e("MONTH", "" + monthIndex);
		return monthIndex;
	}

	private int endgetMonth() {
		try {
			Calendar cal = Calendar.getInstance();
			cal.setTime(new SimpleDateFormat("MMM").parse(month));
			endmonthIndex = cal.get(Calendar.MONTH);
			String monthString = new DateFormatSymbols().getMonths()[monthIndex];
			Log.e("MONTH NAME AFTER CONVERING", "" + monthString);
		} catch (java.text.ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Log.e("MONTH", "" + monthIndex);
		return monthIndex;
	}

	private void startAlarm() {
		AlarmManager alarmManager = (AlarmManager) context
				.getSystemService(context.ALARM_SERVICE);
		Calendar calendar = Calendar.getInstance();
		// calendar.set(Integer.parseInt(year), monthIndex,
		// Integer.parseInt(datOfWeek), hour, min, 0);

		calendar.set(2014, 05, 22, 06, 22, 0);
		long when = calendar.getTimeInMillis(); // notification time
		Intent intent = new Intent(context, ReminderService.class);
		PendingIntent pendingIntent = PendingIntent.getService(context, 0,
				intent, 0);
		alarmManager.set(AlarmManager.RTC, when, pendingIntent);
	}

	private void setOtherReminder() {
		int id = 1;
		Calendar cal = Calendar.getInstance();
		long i = cal.getTimeInMillis();
		Log.e("CURRENT MILLIS", "" + cal.getTimeInMillis());
		getMonth();
		endgetMonth();
		Log.e("YEAR",
				"" + Integer.parseInt(year) + " -- " + "MONTH" + "---"
						+ monthIndex + "-----" + "DAY OF WEEK " + "---"
						+ Integer.parseInt(datOfWeek));

		Log.e("HOUR", "" + hour + " -- " + "MINUTE" + "---" + min + "-----"
				+ "SECOND " + "---" + amPm);
		cal.set(Integer.parseInt(year), monthIndex, Integer.parseInt(datOfWeek));
		cal.set(Calendar.HOUR_OF_DAY, hour);
		cal.set(Calendar.MINUTE, min);
		cal.set(Calendar.SECOND, 0);
		if (amPm.equals("AM")) {
			Log.e("IN IF ENTERTED", "YES");
			customCalenderHour = hour;
			cal.set(Calendar.AM_PM, Calendar.AM);
		} else {
			Log.e("IN ELSE ENTERTED", "YES");
			customCalenderHour = hour + 12;
			cal.set(Calendar.AM_PM, Calendar.PM);
		}

		if (endamPm.equals("AM")) {
			Log.e("IN IF ENTERTED", "YES");
			endcustomCalenderHour = endhour;
		} else {
			Log.e("IN ELSE ENTERTED", "YES");
			endcustomCalenderHour = endhour + 12;
		}
		long j = cal.getTimeInMillis();

		long diff = j - i;
		Log.e("DIFF", "" + diff);
		if (diff > 0) {
			Log.e("NOTIFICTION IS SET", "YES");
			// NotificationReceiver.setNotificationOnDateTime(getActivity(), cal
			// .getTimeInMillis(), tv_eventlongDesc.getText().toString(),
			// id);
			String customCalenderAlertDate = (monthIndex + 1) + "/"
					+ Integer.parseInt(datOfWeek) + "/"
					+ Integer.parseInt(year);
			String endcustomCalenderAlertDate = (endmonthIndex + 1) + "/"
					+ Integer.parseInt(enddatOfWeek) + "/"
					+ Integer.parseInt(endyear);
			setRemindarCustom(customCalenderAlertDate,
					endcustomCalenderAlertDate, customCalenderHour, min,
					endcustomCalenderHour, endmin, eventName);
			showOKAleart("Reminder", "Reminder is saved successfully");
		} else {
			Log.e("NOTIFICTION IS NOT SET", "YES");
		}

	}

	public void setRemindarCustom(String calenderDate, String endcalenderDate,
			int customHour, int customMin, int endcustomHour, int endcustomMin,
			String title) {

		Uri EVENTS_URI = Uri
				.parse(getCalendarUriBase(getActivity()) + "events");
		ContentResolver cr = context.getContentResolver();

		TimeZone timeZone = TimeZone.getDefault();
		Calendar cal = Calendar.getInstance();
		try {
			eventDate = new SimpleDateFormat("MM/dd/yyyy").parse(calenderDate);
			endEventDate = new SimpleDateFormat("MM/dd/yyyy")
					.parse(endcalenderDate);

			cal.setTime(eventDate);
			cal.set(Calendar.HOUR_OF_DAY, customHour);
			cal.set(Calendar.MINUTE, customMin);
			startCalTime = cal.getTimeInMillis();

			cal.setTime(endEventDate);
			cal.set(Calendar.HOUR_OF_DAY, endcustomHour);
			cal.set(Calendar.MINUTE, endcustomMin);
			endCalTime = cal.getTimeInMillis();

			// event insert
			ContentValues values = new ContentValues();
			values.put("calendar_id", 1);
			values.put(CalendarContract.Events.TITLE, title);
			values.put(CalendarContract.Events.DESCRIPTION, dateToPass);
			values.put(CalendarContract.Events.EVENT_LOCATION, location);
			values.put(CalendarContract.Events.DTSTART, startCalTime);
			values.put(CalendarContract.Events.DTEND, endCalTime);
			values.put(CalendarContract.Events.STATUS, 1);
			values.put(CalendarContract.Events.HAS_ALARM, 1);
			values.put(CalendarContract.Events.EVENT_TIMEZONE, timeZone.getID());

			Uri event = cr.insert(EVENTS_URI, values);
			// reminder insert
			Uri REMINDERS_URI = Uri.parse(getCalendarUriBase(getActivity())
					+ "reminders");
			values = new ContentValues();
			values.put("event_id", Long.parseLong(event.getLastPathSegment()));
			values.put("method", 1);
			values.put("minutes", 5);
			cr.insert(REMINDERS_URI, values);
		} catch (Exception e) {
			// TODO: handle exception
		}

	}

	private String getCalendarUriBase(Activity act) {
		String calendarUriBase = null;
		Uri calendars = Uri.parse("content://calendar/calendars");
		Cursor managedCursor = null;
		try {
			managedCursor = act.managedQuery(calendars, null, null, null, null);
		} catch (Exception e) {
		}
		if (managedCursor != null) {
			calendarUriBase = "content://calendar/";
		} else {
			calendars = Uri.parse("content://com.android.calendar/calendars");
			try {
				managedCursor = act.managedQuery(calendars, null, null, null,
						null);
			} catch (Exception e) {
			}
			if (managedCursor != null) {
				calendarUriBase = "content://com.android.calendar/";
			}
		}
		return calendarUriBase;
	}

	View.OnClickListener l = new OnClickListener() {

		@Override
		public void onClick(View v) {
			// startAlarm();
			setOtherReminder();
			// showOKAleart("Reminder", "Remider is set succesfully");
		}
	};

	public void showOKAleart(String title, String message) {
		AlertDialog.Builder builder = new AlertDialog.Builder(context);
		builder.setTitle(title).setMessage(message)
				.setNegativeButton("OK", null).show();
	}

	@Override
	public void alertDialog() {
		showOKAleart("Reminder", "Set");
	}

	public Bitmap setBackground(String filename, String folder,
			ImageView imageView) {
		Bitmap thumbnail = null;
		try {
			FileInputStream fi = new FileInputStream(new File(
					context.getFilesDir(), "/Images/" + folder + "/"
							+ "ThemeImages/" + filename));
			thumbnail = BitmapFactory.decodeStream(fi);
			Drawable d = new BitmapDrawable(getResources(), thumbnail);
			imageView.setImageBitmap(thumbnail);
		} catch (Exception ex) {
			Log.e("getThumbnail() on internal storage", ex.getMessage());
		}
		return thumbnail;
	}
}
